import java.util.HashMap;
import java.util.Scanner;

public class MoreWithMaps{
	private Scanner input = new Scanner(System.in);
	public static void stocks (HashMap<String, Integer> vals, String company) {
		if(vals.containsKey(company)) {
			System.out.println(vals.get(company));
		}
		
		else if(company.equalsIgnoreCase("average")) {
			double sum = 0; 
			for (int i : vals.values()) sum += i;
			System.out.println(sum/vals.size());
		}
		
		else {
			String max = ""; 
			for (String c : vals.keySet()) 
			if (!vals.containsKey(max) || vals.get(c) > vals.get(max))
				max = c;
				System.out.println("The most valuable company is " + max +", with a value of $" + vals.get(max));

		}
	
	}
	
	public String morseCode() {
        String message;
        String translation = "";
        HashMap<String, String> morse = new HashMap<String,String>();
        
        morse.put("a", ".-");
        morse.put("b", "-...");
        morse.put("c", "-.-.");
        morse.put("d", "-..");
        morse.put("e", ".");
        morse.put("f", "..-.");
        morse.put("g", "--.");
        morse.put("h", "....");
        morse.put("i", "..");
        morse.put("j", ".---");
        morse.put("k", "-.-");
        morse.put("l", ".-..");
        morse.put("m", "--");
        morse.put("n", "-.");
        morse.put("o", "---");
        morse.put("p", ".--.");
        morse.put("q", "--.-");
        morse.put("r", ".-.");
        morse.put("s", "...");
        morse.put("t", "-");
        morse.put("u", "..-");
        morse.put("v", "...-");
        morse.put("w", ".--");
        morse.put("x", "-..-");
        morse.put("y", "-.--");
        morse.put("z", "--..");
       
        System.out.println("Type your message");
       
        message = input.nextLine();
        message = message.toLowerCase();
       
        for (int i = 0; i < message.length(); i++) {
            if (morse.containsKey(message.substring(i, i+1))) {
                translation += morse.get(message.substring(i, i+1));
            }
        }
        System.out.println(translation);
        return translation;
    }
	
	public static void double09(HashMap<String, String> targets, String start) {
		
		String currTarget = targets.get(start);
		
		System.out.print(start);
		
		while (!currTarget.equals(start)) {
			System.out.print(", " + currTarget);
			currTarget = targets.get(currTarget);
		}
	}
	
	public static void main(String[] args) {
		HashMap<String, Integer> comps = new HashMap<String, Integer>();
		comps.put("apple", 700);
		comps.put("ibm", 400);
		comps.put("tesla", 1000);
		HashMap<String, String> people = new HashMap<String, String>();
		people.put("Ryan", "Yumna");
		people.put("Cooper", "Anika");
		people.put("Anika", "Ryan");
		people.put("Yumna", "Cooper");
		double09(people, "Anika");

	}

}
